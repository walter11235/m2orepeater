{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC7CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,KAAA,WACA,MAAA,CACA,eAAA,GACA,QAAA,KACA,cAAA,KAGA,QAAA,WACA,KAAA,QAAA,KAAA,SA+DA,QAAA,aAIA,QAAA,CACA,IAAA,SAAA,GACA,QAAA,IAAA,UACA,QAAA,IAAA,IAKA,oBAAA,WACA,IAAA,EAAA,SAAA,iBAAA,iCACA,QAAA,IAAA,cACA,QAAA,IAAA,GACA,IAAA,EAAA,SAAA,uBAAA,kBACA,QAAA,IAAA,gBACA,QAAA,IAAA,GAEA,IAAA,EAAA,EAAA,GAAA,kBACA,QAAA,IAAA,sBACA,QAAA,IAAA,GACA,IAAA,EAAA,EAAA,cAAA,mBAKA,OAJA,QAAA,IAAA,YACA,QAAA,IAAA,GACA,KAAA,eAAA,EAAA,UAAA,cAAA,QAAA,KAAA,KACA,QAAA,IAAA,KAAA,gBACA,KAAA,gBAGA,QAAA,WAIA,QAAA,IAFA,KAEA,gBACA,IAAA,EAFA,6CADA,KAGA,eAGA,OAFA,QAAA,IAAA,iBACA,QAAA,IAAA,GACA,GAGA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,QAAA,IAAA,iBACA,QAAA,IAAA,GACA,QAAA,IAAA,GACA,KAAA,MAAA,QAAA,KAGA,SAAA,CACA,QAAA,WACA,KAAA,sBACA,IAAA,EAAA,KAAA,UACA,EAAA,GAiBA,OAhBA,MAAA,GACA,KAAA,SAAA,GAAA,OAAA,EAAA,SACA,KAAA,SAAA,GAEA,QAAA,IAAA,gBACA,QAAA,IAAA,GACA,EAAA,KAAA,QAAA,SAAA,GACA,EAAA,KAAA,EAAA,cAEA,QAAA,IAAA,cACA,QAAA,IAAA,KAEA,MAAA,SAAA,GAEA,QAAA,MAAA,SAAA,KAEA,IAGA,MAAA,CACA,eAAA,SAAA,GACA,QAAA,IAAA,mCACA,KAAA,WAEA,oBAAA,SAAA,OAxJA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\r\n  props: {\r\n    // Unique id for this interface. Should be added to the lower level \r\n    // HTML input element if applicable. This ID will be used in the label's\r\n    // `for` attribute\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Name of the field\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // The current value. This can either be the default value, the saved database\r\n    // value or the current state after the user made an edit\r\n    value: {\r\n      type: null,\r\n      default: null\r\n    },\r\n    // Type of the field, eg `string`, `hash`, or `array`\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Max length\r\n    length: {\r\n      type: [String, Number],\r\n      default: null\r\n    },\r\n    // If the field is readonly or not\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // If the field is required or not\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // Field options. A json object based on the interface's meta.json file\r\n    options: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    // If the item that's currently being edited is new\r\n    newItem: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // The relation of the current field. Will contain information on the related\r\n    // collection and field(s)\r\n    relation: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The other fields in the current edit page\r\n    fields: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The values of the other fields on the edit page. Can be used for things like\r\n    // automatically generating a slug based on another field\r\n    values: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  }\r\n};\r\n","<template>\r\n  <div id=\"app\">\r\n     <select :value=\"selectedvalue\" @input=\"$emit('input', $event.target.value)\">\r\n         <option disabled value=\"\">Please select one</option>   \r\n         <option v-for=\"item in this.options\" :value=\"item\">{{item}}</option>\r\n     </select>\r\n     <div>{{selectedvalue}}</div>\r\n    <button v-on:click=\"foo\">foo</button>\r\n    <input :value=\"selectedvalue\" @input=\"$emit('selectedvalue')\" />\r\n    <input\r\n      :value=\"value\"\r\n      @input=\"$emit('input', $event.target.value)\"\r\n    />\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\r\n\r\n  export default {\r\n    mixins: [mixin],\r\n    data() {\r\n      return {\r\n        collectionName: \"\",\r\n        options: null,\r\n        selectedvalue: \"\"\r\n      };\r\n    },\r\n    mounted() {\r\n      this.options = this.callAPI;\r\n      /*\r\n      while (true) {\r\n        let oldVal = this.collectionName;\r\n        this.collectionName = this.findCollectionValue();\r\n        if(oldVal != this.collectionName) {\r\n          console.log(\"old is:\");\r\n          console.log(oldVal);\r\n          console.log(\"new one:\");\r\n          console.log(this.collectionName)\r\n        }\r\n        \r\n      }*/\r\n      /*\r\n      // Fetch block options\r\n      const { values } = this._props\r\n      console.log(values);\r\n      \r\n      // To take all \r\n      const fieldsNode = document.querySelectorAll('[data-field]');\r\n      console.log(\"fieldsnode: \");\r\n      console.log(fieldsNode);\r\n      const typeField = document.querySelector('[data-field=type]');\r\n      // console.log(typeField);\r\n      const m2oplace = document.querySelectorAll('div[input-name=\"m2orepeater\"]');\r\n      console.log(\"m2oplace: \");\r\n      console.log(m2oplace);\r\n      const content2up = document.getElementsByClassName('content two-up'); // or document.querySelectorAll('section.content.two-up')\r\n      console.log(\"content2up: \");\r\n      console.log(content2up);\r\n\r\n      const content2up0 = content2up[0].firstElementChild;\r\n      console.log(\"first child node: \");\r\n      console.log(content2up0);\r\n      const val = content2up0.querySelector('.value .no-wrap');\r\n      console.log(\"val is: \");\r\n      console.log(val);\r\n      this.collectionName = val.innerHTML.toLowerCase().replace(/ /g,\"_\");\r\n      console.log(this.collectionName);\r\n      //callAPI(collectionName);\r\n\r\n\r\n      const valueTable = document.querySelector('.row-container');*/\r\n      //const options = this.getOptions();\r\n\r\n      // hide all fields until the user choose a type\r\n      //this.hideAll(fieldsNode)\r\n\r\n      // Show the default value if present\r\n      //this.showFields(options[values.type])\r\n\r\n      /*if (typeField) {\r\n        typeField.addEventListener('change', (e) => {\r\n          const value = e.target.value\r\n\r\n          // Hide all the fields on change\r\n          this.hideAll(fieldsNode)\r\n\r\n          // show fields from the options\r\n          this.showFields(options[value])\r\n        })\r\n      }*/\r\n    },\r\n    updated() {\r\n      // After attribute is updated\r\n      // Watch changes from the collections field\r\n    },\r\n    methods: {\r\n      foo: function(event) {\r\n        console.log(\"button\");\r\n        console.log(event);\r\n        //console.log(document);\r\n\r\n      },\r\n\r\n      findCollectionValue: function() {\r\n        const m2oplace = document.querySelectorAll('div[input-name=\"m2orepeater\"]');\r\n        console.log(\"m2oplace: \");\r\n        console.log(m2oplace);\r\n        const content2up = document.getElementsByClassName('content two-up'); // or document.querySelectorAll('section.content.two-up')\r\n        console.log(\"content2up: \");\r\n        console.log(content2up);\r\n\r\n        const content2up0 = content2up[0].firstElementChild;\r\n        console.log(\"first child node: \");\r\n        console.log(content2up0);\r\n        const val = content2up0.querySelector('.value .no-wrap');\r\n        console.log(\"val is: \");\r\n        console.log(val);\r\n        this.collectionName = val.innerHTML.toLowerCase().replace(/ /g,\"_\");\r\n        console.log(this.collectionName);\r\n        return this.collectionName;\r\n      },\r\n\r\n      findURL: function() {\r\n        \r\n        let vm = this;\r\n        let DIRECTUS_ITEM_URL = \"http://localhost:2443/corporatesite/items/\";\r\n        console.log(vm.collectionName);\r\n        let fullURL = DIRECTUS_ITEM_URL + vm.collectionName;\r\n        console.log(\"full URL is: \");\r\n        console.log(fullURL);\r\n        return fullURL;\r\n      },\r\n\r\n      emitValue(event) {\r\n        const value = event.target.value;\r\n        console.log(\"value in emit\");\r\n        console.log(value);\r\n        console.log(event);\r\n        this.$emit(\"input\", value);\r\n      }\r\n    },\r\n    computed: {\r\n      callAPI: function() {\r\n        this.findCollectionValue();\r\n        const fullURL = this.findURL();\r\n        var dropdownAlternative = [];\r\n        fetch(fullURL) // Call the fetch function passing the url of the API as a parameter\r\n        .then((resp) => resp.json())\r\n        .then(function(response) {\r\n            // Your code for handling the data you get from the API\r\n            console.log(\"inside fetch\");\r\n            console.log(response);\r\n            response[\"data\"].forEach(element => {\r\n              dropdownAlternative.push(element.identifier);\r\n            });\r\n            console.log(\"after push\");\r\n            console.log(dropdownAlternative);\r\n        })\r\n        .catch(function(error) {\r\n            // This is where you run code if the server returns any errors\r\n            console.error(\"Error:\", error);\r\n        });\r\n        return dropdownAlternative;\r\n      }\r\n    },\r\n    watch: {\r\n      collectionName: function(newVal) {\r\n        console.log(\"value in collectionName changed\");\r\n        this.callAPI();\r\n      },\r\n      findCollectionValue: function(newVal) {\r\n        //this.callAPI();\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ninput {\r\n  border-radius: var(--border-radius);\r\n}\r\n</style>\r\n"]}