{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC9BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EADA,IAAA,EAAA,EAAA,QAAA,iDACA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,KAAA,WACA,MAAA,CACA,kBAAA,GACA,mBAAA,GACA,YAAA,GACA,cAAA,GACA,aAAA,CACA,WAAA,KACA,KAAA,QAMA,QAAA,WAEA,QAAA,IAAA,kBACA,KAAA,kBAAA,KAAA,uBAEA,KAAA,OACA,KAAA,MAAA,aACA,KAAA,aAAA,WAAA,KAAA,MAAA,WACA,KAAA,mBAAA,KAAA,MAAA,WACA,QAAA,IAAA,iBACA,QAAA,IAAA,KAAA,oBAEA,KAAA,YAAA,KAAA,SAAA,KAAA,oBACA,QAAA,IAAA,6BACA,QAAA,IAAA,KAAA,aAEA,KAAA,MAAA,OACA,KAAA,cAAA,KAAA,MAAA,KACA,KAAA,aAAA,KAAA,KAAA,MAAA,KACA,QAAA,IAAA,iBACA,QAAA,IAAA,KAAA,kBAOA,QAAA,CASA,QAAA,SAAA,GACA,OAAA,MAAA,GAAA,IAAA,EAAA,QAAA,KAAA,GAWA,oBAAA,SAAA,GACA,KAAA,aAAA,WAAA,KAAA,kBAAA,GAGA,KAAA,mBAAA,KAAA,kBAAA,GAKA,KAAA,MAAA,QAAA,KAAA,eAYA,cAAA,SAAA,GACA,KAAA,cAAA,KAAA,YAAA,GAGA,KAAA,aAAA,KAAA,KAAA,YAAA,GAEA,KAAA,MAAA,QAAA,KAAA,eAYA,SAAA,SAAA,GACA,IAAA,EAAA,GAYA,OAVA,MADA,6CAAA,GAEA,KAAA,SAAA,GAAA,OAAA,EAAA,SACA,KAAA,SAAA,GACA,EAAA,KAAA,QAAA,SAAA,GACA,EAAA,KAAA,EAAA,gBAGA,MAAA,SAAA,GACA,QAAA,MAAA,SAAA,KAEA,GAUA,qBAAA,WAEA,IAAA,EAAA,GAuBA,OAnBA,MAHA,mDAIA,KAAA,SAAA,GAAA,OAAA,EAAA,SACA,KAAA,SAAA,GAIA,EAAA,KAAA,QAAA,SAAA,GACA,IAAA,EAAA,EAAA,WACA,EAAA,WAAA,cAGA,EAAA,KAAA,OAKA,MAAA,SAAA,GACA,QAAA,MAAA,SAAA,KAEA,IAMA,SAAA,GAMA,MAAA,CAWA,mBAAA,SAAA,EAAA,GACA,QAAA,IAAA,qBACA,QAAA,IAAA,GACA,QAAA,IAAA,qBACA,QAAA,IAAA,IAGA,GAAA,GAEA,QAAA,IAAA,mBACA,KAAA,YAAA,KAAA,SAAA,IAGA,GAAA,GAAA,KAAA,QAAA,KAAA,gBAEA,QAAA,IAAA,oBACA,QAAA,IAAA,KAAA,eACA,KAAA,YAAA,KAAA,SAAA,KAIA,QAAA,IAAA,mBAGA,KAAA,cAAA,KACA,KAAA,aAAA,KAAA,KAEA,KAAA,YAAA,KAAA,SAAA,OAzMA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\r\n  props: {\r\n    // Unique id for this interface. Should be added to the lower level \r\n    // HTML input element if applicable. This ID will be used in the label's\r\n    // `for` attribute\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Name of the field\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // The current value. This can either be the default value, the saved database\r\n    // value or the current state after the user made an edit\r\n    value: {\r\n      type: null,\r\n      default: null\r\n    },\r\n    // Type of the field, eg `string`, `hash`, or `array`\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Max length\r\n    length: {\r\n      type: [String, Number],\r\n      default: null\r\n    },\r\n    // If the field is readonly or not\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // If the field is required or not\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // Field options. A json object based on the interface's meta.json file\r\n    options: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    // If the item that's currently being edited is new\r\n    newItem: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // The relation of the current field. Will contain information on the related\r\n    // collection and field(s)\r\n    relation: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The other fields in the current edit page\r\n    fields: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The values of the other fields on the edit page. Can be used for things like\r\n    // automatically generating a slug based on another field\r\n    values: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  }\r\n};\r\n","<!-- this template can contain only one div -->\r\n<template>\r\n  <!-- div with id \"app\", class \"content two-up\" to separate two select dropdown in half to pass in just one line -->\r\n  <div id=\"app\" class=\"content two-up\">\r\n    <!-- collecttion dropbox -->\r\n      <v-select \r\n        id = \"collections\" \r\n        :options=\"collectionOptions\" \r\n        :value.sync=\"selectedCollection\"\r\n        @input=\"this.emitCollectionValue\" \r\n        return-object>\r\n      </v-select>\r\n      \r\n    <!-- item dropbox, item will reatively change when selected collection changes -->\r\n      <v-select \r\n        id = \"items\" \r\n        :options=\"itemOptions\" \r\n        :value=\"selectedvalue\"  \r\n        @input=\"this.emitItemValue\" \r\n        return-object>\r\n     </v-select>\r\n\r\n     <!-- for testing -->\r\n     <div>{{selectedCollection}}</div>\r\n     <div>{{selectedvalue}}</div>\r\n\r\n     <span>this is a test</span>\r\n     <!-- value is the stored value of last emitted \"collection\" and \"item\" -->\r\n     <span>{{this.value}}</span>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\r\n  export default {\r\n    mixins: [mixin],\r\n    data() {\r\n      return {\r\n        collectionOptions: [], // possible selection of collection\r\n        selectedCollection: \"\", // the selected collection\r\n        itemOptions: [], // possible selection of item\r\n        selectedvalue: \"\", // the selected item\r\n        toEmitObject: { // object to be emitted\r\n          collection: null,\r\n          item: null,\r\n          \r\n        }\r\n      };\r\n    },\r\n    // after the page is loaded\r\n    mounted() {\r\n\r\n      console.log(\"inside mounted\");\r\n      this.collectionOptions = this.getCollectionsMethod();\r\n\r\n      if (this.value) {\r\n        if (this.value.collection) {\r\n          this.toEmitObject.collection = this.value.collection;\r\n          this.selectedCollection = this.value.collection;\r\n          console.log(\"selected col:\");\r\n          console.log(this.selectedCollection);\r\n\r\n          this.itemOptions = this.getItems(this.selectedCollection);\r\n          console.log(\"select options in mounted\");\r\n          console.log(this.itemOptions);\r\n\r\n          if (this.value.item) {\r\n            this.selectedvalue = this.value.item;\r\n            this.toEmitObject.item = this.value.item;\r\n            console.log(\"selected ite:\");\r\n            console.log(this.selectedvalue);\r\n          }\r\n        }\r\n      }\r\n\r\n    },\r\n    // necessary methods\r\n    methods: {\r\n    /**\r\n     * @method isEmpty\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @param any $value The name of the variable to check if empty.\r\n     * @return Boolean True if @param value is undefined, null, [] or \"\", false otherwise.\r\n     */\r\n      isEmpty(value){\r\n        return (value == null || value.length === 0 || value === '');\r\n      },\r\n      \r\n    /**\r\n     * @method emitCollectionValue\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @param Integer $event The index value of selected collection.\r\n     * Save selected collection value in @selectedCollection and @toEmitObject.collection. Emit if @toEmitObject.item is not null or empty.\r\n     */\r\n      emitCollectionValue(event) {\r\n        this.toEmitObject.collection = this.collectionOptions[event];\r\n        //console.log(\"inside emit Collection:\");\r\n        //console.log(this.toEmitObject);\r\n        this.selectedCollection = this.collectionOptions[event];\r\n\r\n        //console.log(\"selected value:\");\r\n        //console.log(this.selectedCollection);\r\n        //if (this.toEmitObject.item) {\r\n        this.$emit(\"input\", this.toEmitObject);\r\n        //}\r\n      },\r\n\r\n    /**\r\n     * @method emitItemValue\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @param Integer $event The index value of selected item.\r\n     * Save selected item value in @selectedvalue and @toEmitObject.item. Emit if @toEmitObject.collection is not null or empty.\r\n     */\r\n      emitItemValue(event) {\r\n        this.selectedvalue = this.itemOptions[event];\r\n        //console.log(\"selected value:\");\r\n        //console.log(this.selectedvalue);\r\n        this.toEmitObject.item = this.itemOptions[event];\r\n        //if (this.toEmitObject.collection) {\r\n          this.$emit(\"input\", this.toEmitObject);\r\n        //}\r\n      },\r\n\r\n    /**\r\n     * @method getItems\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @param String $currentSelectedCollection The value of the selected collection.\r\n     * @return Array Contains all possible item value from the selected collection.\r\n     */\r\n      getItems: function(currentSelectedCollection) {\r\n        var dropdownAlternative = [];\r\n        const ITEM_URL = \"http://localhost:2443/corporatesite/items/\" + currentSelectedCollection;\r\n        fetch(ITEM_URL) // Call the fetch function passing the url of the API as a parameter\r\n        .then((resp) => resp.json())\r\n        .then(function(response) {\r\n            response[\"data\"].forEach(element => {\r\n              dropdownAlternative.push(element.identifier);\r\n            });\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error:\", error);\r\n        });\r\n        return dropdownAlternative;\r\n      },\r\n\r\n    /**\r\n     * @method getCollectionsMethod\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @return Array Contains all possible collection value from COLLECTION_URL.\r\n     */\r\n      getCollectionsMethod: function() {\r\n        \r\n        var collectionDropdown = [];\r\n        const COLLECTION_URL = \"http://localhost:2443/corporatesite/collections\";\r\n        \r\n\r\n        fetch(COLLECTION_URL) // Call the fetch function passing the url of the API as a parameter\r\n        .then((resp) => resp.json())\r\n        .then(function(response) {\r\n            // Your code for handling the data you get from the API\r\n            //console.log(\"inside fetch\");\r\n            //console.log(response);\r\n            response[\"data\"].forEach(element => {\r\n              const valueToAdd = element.collection;\r\n              if(valueToAdd.startsWith(\"directus_\")) {\r\n                return;\r\n              }\r\n              collectionDropdown.push(valueToAdd);\r\n            });\r\n            //console.log(\"after push\");\r\n            //console.log(collectionDropdown);\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error:\", error);\r\n        });\r\n        return collectionDropdown;\r\n      },\r\n\r\n      \r\n      \r\n    },\r\n    computed: {\r\n      //getCollections: function() {\r\n      //  return this.getCollectionsMethod();\r\n      //}\r\n    },\r\n    \r\n    watch: {\r\n    /**\r\n     * @function selectedCollection\r\n     * \r\n     * @author hnguyen\r\n     * \r\n     * @param String $currentSelectedCollection The value of the current selected collection.\r\n     * @param String $oldSelectedCollection The value of the old selected collection.\r\n     * \r\n     * Watch changes in selectedCollection.\r\n     */\r\n      selectedCollection: function(currentSelectedCollection, oldSelectedCollection) {\r\n        console.log(\"cur val in watch:\");\r\n        console.log(currentSelectedCollection);\r\n        console.log(\"olda val in watch\");\r\n        console.log(oldSelectedCollection);\r\n\r\n        // first initial, oldSelectedCollection is empty or null, current selected collection is not empty and item is not yet selected\r\n        if(!oldSelectedCollection && currentSelectedCollection) {\r\n\r\n          console.log(\"inside first if\");\r\n          this.itemOptions = this.getItems(currentSelectedCollection);\r\n\r\n        // when change selected collection value without selecting item\r\n        } else if (oldSelectedCollection && currentSelectedCollection && this.isEmpty(this.selectedvalue)) {\r\n          \r\n          console.log(\"inside second if\");\r\n          console.log(this.selectedvalue);\r\n          this.itemOptions = this.getItems(currentSelectedCollection);\r\n\r\n        // when change selected collection value, item from old collection value is selected\r\n        } else {\r\n          console.log(\"inside third if\");\r\n          // collection and item are not null\r\n          // collection is updated => erase item\r\n          this.selectedvalue = null;\r\n          this.toEmitObject.item = null;\r\n          \r\n          this.itemOptions = this.getItems(currentSelectedCollection);\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ninput {\r\n  border-radius: var(--border-radius);\r\n}\r\n#collections {\r\n  width: 50%;\r\n}\r\n\r\n#items {\r\n  width: 50%;\r\n}\r\n</style>\r\n"]}