{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC1DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,QAAA,WAAA,IAAA,EAAA,KAEA,EAAA,KAAA,OAAA,OACA,QAAA,IAAA,GAEA,IAAA,EAAA,SAAA,iBAAA,gBACA,EAAA,SAAA,cAAA,qBACA,EAAA,KAAA,aAGA,KAAA,QAAA,GAGA,KAAA,WAAA,EAAA,EAAA,OAEA,GACA,EAAA,iBAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MAGA,EAAA,QAAA,GAGA,EAAA,WAAA,EAAA,OAIA,QAAA,CACA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,KAAA,MAAA,QAAA,MAhCA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\r\n  props: {\r\n    // Unique id for this interface. Should be added to the lower level \r\n    // HTML input element if applicable. This ID will be used in the label's\r\n    // `for` attribute\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Name of the field\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // The current value. This can either be the default value, the saved database\r\n    // value or the current state after the user made an edit\r\n    value: {\r\n      type: null,\r\n      default: null\r\n    },\r\n    // Type of the field, eg `string`, `hash`, or `array`\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Max length\r\n    length: {\r\n      type: [String, Number],\r\n      default: null\r\n    },\r\n    // If the field is readonly or not\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // If the field is required or not\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // Field options. A json object based on the interface's meta.json file\r\n    options: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    // If the item that's currently being edited is new\r\n    newItem: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // The relation of the current field. Will contain information on the related\r\n    // collection and field(s)\r\n    relation: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The other fields in the current edit page\r\n    fields: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The values of the other fields on the edit page. Can be used for things like\r\n    // automatically generating a slug based on another field\r\n    values: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  }\r\n};\r\n","<template>\r\n  <input @input=\"emitValue\" :value=\"value\" />\r\n</template>\r\n\r\n<script>\r\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\r\n\r\n  export default {\r\n    mixins: [mixin],\r\n    mounted() {\r\n      // Fetch block options\r\n      const { values } = this._props\r\n      console.log(values);\r\n      \r\n      const fieldsNode = document.querySelectorAll('[data-field]');\r\n      const typeField = document.querySelector('[data-field=type]');\r\n      const options = this.getOptions();\r\n\r\n      // hide all fields until the user choose a type\r\n      this.hideAll(fieldsNode)\r\n\r\n      // Show the default value if present\r\n      this.showFields(options[values.type])\r\n\r\n      if (typeField) {\r\n        typeField.addEventListener('change', (e) => {\r\n          const value = e.target.value\r\n\r\n          // Hide all the fields on change\r\n          this.hideAll(fieldsNode)\r\n\r\n          // show fields from the options\r\n          this.showFields(options[value])\r\n        })\r\n      }\r\n    },\r\n    methods: {\r\n      emitValue(event) {\r\n        const value = event.target.value;\r\n        this.$emit(\"input\", value);\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ninput {\r\n  border-radius: var(--border-radius);\r\n}\r\n</style>\r\n"]}