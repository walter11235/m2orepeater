{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;ACnBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EADA,IAAA,EAAA,EAAA,QAAA,iDACA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,KAAA,WACA,MAAA,CACA,aAAA,KAIA,QAAA,aAEA,QAAA,aAIA,QAAA,GAGA,QAAA,aAEA,SAAA,GAGA,MAAA,IAtBA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\r\n  props: {\r\n    // Unique id for this interface. Should be added to the lower level \r\n    // HTML input element if applicable. This ID will be used in the label's\r\n    // `for` attribute\r\n    id: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Name of the field\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // The current value. This can either be the default value, the saved database\r\n    // value or the current state after the user made an edit\r\n    value: {\r\n      type: null,\r\n      default: null\r\n    },\r\n    // Type of the field, eg `string`, `hash`, or `array`\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // Max length\r\n    length: {\r\n      type: [String, Number],\r\n      default: null\r\n    },\r\n    // If the field is readonly or not\r\n    readonly: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // If the field is required or not\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // Field options. A json object based on the interface's meta.json file\r\n    options: {\r\n      type: Object,\r\n      default: () => ({})\r\n    },\r\n    // If the item that's currently being edited is new\r\n    newItem: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // The relation of the current field. Will contain information on the related\r\n    // collection and field(s)\r\n    relation: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The other fields in the current edit page\r\n    fields: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // The values of the other fields on the edit page. Can be used for things like\r\n    // automatically generating a slug based on another field\r\n    values: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  }\r\n};\r\n","<template>\r\n<!--\r\n  <div id=\"app\">\r\n    <v-flex xs12 sm6 d-flex>\r\n      <v-select id = \"collections\" :options=\"collectionOptions\" item-value=\"this.selectedCollection\" :value.sync=\"selectedCollection\"\r\n @input=\"this.emitCollectionValue\" @change=\"loadPlotInformation()\"  return-object>\r\n        <template v-slot:option=\"option\">\r\n          <span :class=\"option.icon\"></span>\r\n          {{ option.title }}\r\n      </template>\r\n      </v-select>\r\n      <div>{{selectedCollection}}</div>\r\n     </v-flex>\r\n\r\n     \r\n     <v-select id = \"items\" :options=\"itemOptions\" v-model=\"selectedvalue\" autocomplete  @input=\"this.emitItemValue\" >\r\n     </v-select>\r\n     <div>{{selectedvalue}}</div>\r\n     <v-select id = \"items\" :options=\"optionExample\" v-model=\"selectedOption\" @input=\"$emit('input', optionExample[selectedOption])\" v-on:change=\"loadPlotInformation()\">\r\n       <div>{{selectedOption}}</div>\r\n     </v-select>\r\n     \r\n    <button v-on:click=\"foo\">foo</button>\r\n    <div>{{selectedOption}}</div>\r\n    <div>{{optionExample[selectedOption]}}</div>\r\n    <input\r\n      :value=\"placeholder1\"\r\n      :disabled=\"readonly\"\r\n      @input=\"$emit('input', $event.target.value)\"\r\n    />\r\n    <input\r\n      :value=\"placeholder2\"\r\n      @input=\"$emit('input', $event.target.value)\"\r\n    />\r\n    \r\n  </div>\r\n  -->\r\n  <input\r\n      :value=\"placeholder2\"\r\n      @input=\"$emit('input', $event.target.value)\"\r\n    />\r\n    \r\n</template>\r\n\r\n<script>\r\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\r\n  export default {\r\n    mixins: [mixin],\r\n    data() {\r\n      return {\r\n        placeholder2:\"\",\r\n      };\r\n    },\r\n    \r\n    mounted() {\r\n    },\r\n    updated() {\r\n      // After attribute is updated\r\n      // Watch changes from the collections field\r\n    },\r\n    methods: {\r\n      \r\n    },\r\n    created() {\r\n    },\r\n    computed: {\r\n      \r\n    },\r\n    watch: {\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ninput {\r\n  border-radius: var(--border-radius);\r\n}\r\n</style>\r\n"]}